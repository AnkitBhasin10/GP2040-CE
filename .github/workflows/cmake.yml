name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
#  pull_request_target:
#    branches: [ "main" ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  call-node-workflow:
    uses: ./.github/workflows/node.js.yml
  build:
    needs: call-node-workflow
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    #Global Setup
    - name: Checkout GP2040-CE
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Setup SDK pipeline
      uses: Fortinbra/RaspberryPiPicoBuild@v3

    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.2
      with:
        name: fsData
        path: ${{github.workspace}}/lib/httpd/

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l
      #End Global Setup

    - name: Pico Build Configure CMake
      shell: bash
      run: >-
        for i in
          ARCController
          Blank
          Pico
          BentoBox
          ergoSHIFTRev2
          FightboardV3
          FightboardV3Mirrored
          FlatboxRev4
          FlatboxRev5
          FlatboxRev5RGB
          FlatboxRev5Southpaw
          Granola
          KB2040
          KeyboardConverter
          Haute42COSMOX
          Liatris
          MavercadeRev1
          MavercadeRev2
          OpenCore0
          OpenCore0WASD
          PicoAnn
          PicoFightingBoard
          RanaTadpole
          ReflexCtrlGenesis6
          ReflexCtrlNES
          ReflexCtrlSaturn
          ReflexCtrlSNES
          ReflexCtrlVB
          ReflexEncodeV1.2
          ReflexEncodeV2.0
          RP2040AdvancedBreakoutBoard
          RP2040AdvancedBreakoutBoardUSBPassthrough
          RP2040MiniBreakoutBoard
          SparkFunProMicro
          WaveshareZero
          Stress
          SGFDevices
          ZeroRhythm;
        do
          PICO_SDK_PATH=${{github.workspace}}/pico-sdk GP2040_BOARDCONFIG=${i} SKIP_WEBBUILD=TRUE cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}};
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}};
        done
